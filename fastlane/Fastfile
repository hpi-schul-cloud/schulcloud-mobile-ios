# Customise this file, documentation can be found here:
# https://github.com/fastlane/fastlane/tree/master/fastlane/docs
# All available actions: https://docs.fastlane.tools/actions
# can also be listed using the `fastlane actions` command

# Change the syntax highlighting to Ruby
# All lines starting with a # are ignored when running `fastlane`

# If you want to automatically update fastlane if a new version is available:
# update_fastlane

# This is the minimum version number required.
# Update this, if you use features of a newer version
fastlane_version "2.58.0"

default_platform :ios

platform :ios do
  # before_all do
  #   # ENV["SLACK_URL"] = "https://hooks.slack.com/services/..."
  #   cocoapods
  # end

  desc "Increments the build number for all targets"
  lane :increment_build do
    new_build_number = increment_build_number
    version_number = get_version_number
    commit_version_bump(
      message: "Bump build number to #{new_build_number} (version #{version_number})."
    )
  end

  desc "Increments the version number for a new patch version"
  lane :increment_version_patch do
    new_version_number = increment_version_number(
      bump_type: "patch",
    )
    revert_tvOS_changes()
    commit_version_bump(
      message: "New version #{new_version_number} (patch)."
    )
  end

  desc "Increments the version number for a new minor version"
  lane :increment_version_minor do
    new_version_number = increment_version_number(
      bump_type: "minor",
    )
    revert_tvOS_changes()
    commit_version_bump(
      message: "New version #{new_version_number} (minor)."
    )
  end

  desc "Increments the version number for a new major version"
  lane :increment_version_major do
    new_version_number = increment_version_number(
      bump_type: "major",
    )
    revert_tvOS_changes()
    commit_version_bump(
      message: "New version #{new_version_number} (major)."
    )
  end

  desc "Runs all the tests"
  lane :test do
    scan
  end

  # desc "Submit a new Beta Build to Apple TestFlight"
  # desc "This will also make sure the profile is up to date"
  # lane :beta do
  #   # match(type: "appstore") # more information: https://codesigning.guide
  #   gym # Build your app - more options available
  #   pilot

  #   # sh "your_script.sh"
  #   # You can also use other beta testing services here (run `fastlane actions`)
  # end

  # desc "Deploy a new version to the App Store"
  # lane :release do
  #   # match(type: "appstore")
  #   # snapshot
  #   gym # Build your app - more options available
  #   deliver(force: true)
  #   # frameit
  # end

  desc "Uploads the application's metadata to iTunes Connect"
  lane :metadata do
    snapshot
  end

  # lane :build do
  #   gym(
  #     export_method: "app-store",
  #     export_options: {
  #       provisioningProfiles: {
  #         "org.schulcloud" => "Provisioning Profile Name",
  #       }
  #     }
  #   )
  # end

  # You can define as many lanes as you want

  # after_all do |lane|
  #   # This block is called, only if the executed lane was successful

  #   # slack(
  #   #   message: "Successfully deployed new App Update."
  #   # )
  # end

  # error do |lane, exception|
  #   # slack(
  #   #   message: exception.message,
  #   #   success: false
  #   # )
  # end
end


# More information about multiple platforms in fastlane: https://github.com/fastlane/fastlane/blob/master/fastlane/docs/Platforms.md
# All available actions: https://docs.fastlane.tools/actions

# fastlane reports which actions are used. No personal data is recorded. 
# Learn more at https://github.com/fastlane/fastlane#metrics
